import sys
from Crypto.Random import get_random_bytes
import secrets



mul2 = [
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e,
    0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e,
    0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e,
    0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e,
    0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e,
    0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae,
    0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce,
    0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee,
    0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe
]



mul3 = [
     0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09,
     0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
     0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39,
     0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
     0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69,
     0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
     0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59,
     0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
     0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9,
     0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
     0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9,
     0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
     0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9,
     0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
     0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99,
     0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81
]



def s_box_substitution(state):
    return [mul2[state[0]] ^ mul3[state[1]] ^ state[2] ^ state[3],
            state[0] ^ mul2[state[1]] ^ mul3[state[2]] ^ state[3],
            state[0] ^ state[1] ^ mul2[state[2]] ^ mul3[state[3]],
            mul3[state[0]] ^ state[1] ^ state[2] ^ mul2[state[3]]]



def shift_rows(state):
    return [state[0], state[1], state[2], state[3],
            state[5], state[6], state[7], state[4],
            state[10], state[11], state[8], state[9],
            state[15], state[12], state[13], state[14]]



def saes_encrypt(plaintext, key):
    round_keys = generate_round_keys(key)
    state = add_round_key(plaintext, round_keys[0])



    for i in range(1, 5):
        state = s_box_substitution(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[i])



    state = s_box_substitution(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[5])



    return state



def generate_round_keys(key):
    round_keys = [key]
    temp_key = key



    for i in range(1, 6):
        temp_key = cyclic_left_shift(temp_key, 1)
        temp_key = s_box_substitution(temp_key)
        temp_key[0] ^= secrets.token_bytes(1)[0]  # XOR with a random byte
        round_keys.append(temp_key)



    return round_keys



def cyclic_left_shift(key, shift):
    return key[shift:] + key[:shift]



def add_round_key(state, round_key):
    return [state[i] ^ round_key[i] for i in range(16)]



def mix_columns(state):
    mixed_state = []



    for i in range(4):
        mixed_state.extend(mul2[state[i*4]] ^ mul3[state[i*4+1]] ^ state[i*4+2] ^ state[i*4+3])
        mixed_state.extend(state[i*4] ^ mul2[state[i*4+1]] ^ mul3[state[i*4+2]] ^ state[i*4+3])
        mixed_state.extend(state[i*4] ^ state[i*4+1] ^ mul2[state[i*4+2]] ^ mul3[state[i*4+3]])
        mixed_state.extend(mul3[state[i*4]] ^ state[i*4+1] ^ state[i*4+2] ^ mul2[state[i*4+3]])



    return mixed_state



def main():
    key = get_random_bytes(16)
    plaintext = get_random_bytes(16)



    ciphertext = saes_encrypt(plaintext, key)



    print("Key:", key.hex().upper())
    print("Plaintext:", plaintext.hex().upper())
    print("Ciphertext:", bytes(ciphertext).hex().upper())



if __name__ == "__main__":
    main()